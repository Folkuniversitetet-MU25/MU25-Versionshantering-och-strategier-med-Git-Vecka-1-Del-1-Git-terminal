🧭 Kursstart + Workshop – Git & terminal (solo-flöde)

⏰ Tid: ca 3h
📚 Kurs: Versionshantering med Git & GitHub
📅 Vecka 1, Del 1

--------------------------------------------------
--------------------------------------------------

🎯 Lektionsmål

Efter lektionen ska studenterna kunna:

Förklara vad versionskontroll och Git är, samt skillnaden lokal/fjärr.

Köra grundflödet i terminalen: status → add → commit → push i ett eget repo.

Skapa repo, skriva sin första README, lägga till .gitignore, och konfigurera user.name/user.email.

Förstå “modified / staged / committed” och kunna läsa git status.

--------------------------------------------------
--------------------------------------------------

📝 Lektionsplanering (3 timmar)

– Uppstart
  - Genomgång av kursplan.
  - Genomgång av kursplaneringen i Azomo, schema och bedömningsformer

- Kartläggning: Stafettpinnen -“Vad kan ni om Git?” 
Vad/hur har du använt tidigare: Git? Terminal? Skapat repo själv?

Berätta hur jag tänkter om kursen, (Liten kurs men kan fyllas på med väldigt mycket men jag kunnat ta med ännu mera, vi har begränsad tid för agilt.)

– PowerPoint & Teori (Slides 1-26)

– Demo 1 – “Från tom mapp till första commit”

– Demo 2 – “Koppla till GitHub & push”

– Självständiga övningar

– Sammanfattning & Preview

--------------------------------------------------
--------------------------------------------------

📢 PowerPoint – Talarmanus:

## Slide 1-26 Lektion 1 – Vecka 1 (mån 13 okt, 13:00–16:00)

--------------------------------------------------

### Slide 1

**Titel:** Versionshantering med Git & Github
**Innehåll:**
mandus.lindstrom@zocom.se

**Talarmanus:**
Versionskontroll = spåra förändringar över tid, se vem som gjort vad och kunna backa. Det gör samarbete tryggt och effektivt.

--------------------------------------------------

### Slide 2

**Titel:** Vad är Git?
**Innehåll:**
Saknas

**Talarmanus:**
GGit är branschstandard för versionskontroll.
Tänk på Git som en tidsmaskin för kod + ett samarbetsverktyg.
Under kursen nöter vi grundloopen: status → add → commit → push → PR.
Behärskar du den och förstår modified/staged/committed, är du farligt produktiv redan nu.

--------------------------------------------------

### Slide 3

**Titel:** Tack till
**Innehåll:**

Detta är en bearbetning av https://www.slideshare.net/HubSpot/git-101-git-and-github-for-beginners
HubSpot Software Engineer Meghan Nelson created this intro to git and GitHub for a Women Who Code meetup.
Se även An Intro to Git and GitHub for Beginners (Tutorial)

\*Talarmanus:\*\*

Låt oss kort knyta till GitHub: origin är vårt fjärrrepo på GitHub.

GitHub har stängt av vanliga lösenord för git push över HTTPS av säkerhetsskäl.
Använd i stället PAT (Personal Access Token) eller SSH-nyckel – de kan tidsbegränsas, återkallas och ges minimala rättigheter, och fungerar med 2FA.

Påminn om arbetssätt: pusha ofta i små steg, jobba i feature-brancher och öppna PR tidigt för snabb feedback och färre konflikter.

--------------------------------------------------

### Slide 4

**Titel:** Installera git (optional)

**Innehåll:**

Windows
http://git-scm.com/download/win 
Mac
http://git-scm.com/download/mac

Linux (Debian)
Command: sudo apt-get install git

Linux (Fedora)
Command: sudo dnf/yum install git


**Talarmanus:**
Knyt ihop punkterna till vardagsflödet: status → add → commit → push → PR. Visa gärna ett kort demo så teorin landar.

--------------------------------------------------

### Slide 5

**Titel:** Terminalen

**Innehåll:**

Läs: Installera och använd en terminal

**Talarmanus:**

Nu växlar vi fokus till terminalen. Det är här Git bor på riktigt.
Anledningen att vi lägger tid på terminalen är att alla grafiska verktyg i botten bara kör Git-kommandon åt oss.
När något strular, eller när vi behöver göra lite mer avancerade saker, är terminalen alltid den säkra vägen.

På Windows använder vi Git Bash, på macOS Terminal, och i VS Code finns en inbyggd terminal.
Målet i kursen är att du ska känna dig trygg med enkla kommandon som git status, git add, git commit och git log.
Det räcker långt, och du kommer kunna felsöka mycket bättre.”

Git lever i terminalen. GUI är bra, men terminalen räddar när något strular.
Målet är trygghet i bas-kommandon.

--------------------------------------------------

### Slide 6

**Titel:** Första gången du kör Git: inställningar

**Innehåll:**
Saknas

**Talarmanus:**
Git är branschstandard för versionskontroll. Under kursen nöter vi grundloopen: status → add → commit → push → PR.

Visa/skriv i terminalen:

git --version
git config --global user.name "Förnamn Efternamn"
git config --global user.email "din@mail.se"
git config --global init.defaultBranch main
git config --list --global

Förklara: E-posten bör matcha den som används på GitHub-kontot, annars kommer inte commits att kopplas till deras GitHub-profil.

--------------------------------------------------

### Slide 7

**Titel:** GitHub Desktop vs VS Code vs terminalen

**Innehåll:**

Git är ett kommandoradsprogram.
GitHub Desktop och VS Code är bara skal som kör terminalkommandon i bakgrunden!
Ibland kan man råka ut för situationer där GitHub Desktop och VS Code inte räcker till. De kan helt inte täcka in alla kombinationer av märkligheter som kan inträffa när vi jobbar med git.
Genom att lära sig vad git gör, får du en bättre förståelse och lättare att lösa de problem som uppstår.

**Talarmanus:**

”Det här är viktigt: Git är ett kommandoradsprogram.
GitHub Desktop och VS Code är skal som bara skickar Git-kommandon i bakgrunden.
De är jättebra till vardags – staging, diffar, enkla merges – men de kan inte allt.
När det blir konstiga konflikter, när historiken behöver städas, eller när vi vill göra rebase -i och liknande, då är terminalen lösningen.

Två praktiska tips:

Fjärren origin är ditt repo på GitHub.
Vi autentiserar med SSH-nyckel eller PAT – vanliga lösenord funkar inte längre mot GitHub av säkerhetsskäl.

Jobba i feature-brancher, pusha ofta och öppna PR tidigt.
Då får du feedback innan det hinner bli stort och krångligt.”

--------------------------------------------------

### Slide 8

**Titel:** Git kommandon

**Innehåll:**
Läs https://github.com/lejonmanen/git-instruktion/blob/main/git.md#git


Slide 8 – Talarmanus

Grunder:

git status – visar ändringar, vad som är staged, och vilken branch du står på.

git add <fil> / git add . – lägg ändringar i staging inför commit.

git commit -m "Add README" – spara en version (snapshot). Skriv kort & i imperativ.

git push – ladda upp dina commits till fjärren (origin).

git pull – hämta + merge:a senaste från fjärren.

Branch & historik:

git switch <branch> – byt branch.

git switch -c <ny-branch> – skapa + byt till ny branch.

git merge <from-branch> – slå ihop en branch in i din nuvarande.

git rebase <bas-branch> – städa/flytta din historik (använd på egna brancher, inte på main).

git log --oneline – kompakt historikvy (perfekt för demo & check).

Repo-setup:

git init – skapa nytt repo i aktuell mapp.

git remote -v – visa kopplade fjärrar (t.ex. origin → GitHub).

git remote add origin <URL> – koppla lokalt repo till GitHub.

git clone <URL> – hämta ett repo från GitHub till din dator.

Terminal-hjälp (navigering):

ls, ls -l – lista filer.

cd, cd .. – byt mapp / gå uppåt.

pwd – visa nuvarande mapp.

clear – rensa terminalfönstret.

touch <fil> – skapa tom fil.

Commit-stil:

Skriv commit-meddelanden kort & i imperativ: “Add README”, “Fix typo”, “Update styles” – och gärna varför, inte bara vad: “Add README for intro exercise”.

--------------------------------------------------

Alternativ slide 8:

**Talarmanus:**
Låt oss gå igenom kommandona kort och tydligt: 

• `git status` – visar vad som är ändrat, vad som är staged och vilken branch du står på. 

• `git add` – lägg valda ändringar i staging-ytan inför commit (`git add .` för allt). 

• `git commit -m "…"` – spara en version. Skriv kort i imperativ: _add/fix/update_. 

• `git fetch` – hämta senaste utan att mergea automatiskt. 

• `git switch` – förklara kort vad kommandot gör i ert flöde. 

• `git merge` – slå ihop en branch till din nuvarande. Lös konflikter i editor vid behov. 

• `git  rebase,` – förklara kort vad kommandot gör i ert flöde. 

• `git rebase` – flytta/städa commits (använd på egna brancher, inte på `main`). 

• `git pull` – hämta och mergea senaste från fjärren. 

• `git push` – publicera dina commits till fjärren (`origin`). 

• `git init` – skapar ett nytt lokalt repository i aktuell mapp. 

• `git remote -v` – visar kopplade fjärrar (ex. `origin` mot GitHub). 

• `git clone <url>` – hämta ett repo från GitHub till din dator. Håll commits små och beskrivande – det gör historiken lätt att läsa och reviewa.

Tips: Skriv commit-meddelanden i imperativ form och kort: “Add README”, “Fix typo”, “Update styling” – gärna med en kort förklaring om varför, inte bara vad (“Add README for intro exercise”).

Talarmanus:

Vi ska gå igenom det praktiska grundflödet i Git: initiera ett repo, lägga till filer i staging, skapa tydliga commits och navigera mellan grenar.
Betona skillnaden mellan working directory, staging area och repository.
Visa hur git status berättar exakt vad som händer i varje steg.

När vi pratar commit: påminn om små, logiska commits med imperativa meddelanden.
Det gör historiken lättläst och förenklar code review.

För grenar: förklara att en branch bara är en pekare till en commit.
Att byta branch flyttar HEAD, inte filerna magiskt – Git gör checkout av filinnehållet som hör till den commit du pekar på.

Vid merge: förklara fast-forward jämfört med en vanlig merge-commit, och varför små, fokuserade PR minskar konflikter.
Knyt detta till GitHub: origin är vårt fjärrrepo.
Vi autentiserar med SSH-nyckel eller PAT.
Förklara kort varför lösenord inte längre fungerar mot GitHub.
Påminn om att pusha ofta i feature-brancher och att öppna PR tidigt för feedback.
Berör även hur vi hanterar förändringar på ett säkert sätt: före push kan vi städa historiken med rebase -i; efter push använder vi git revert.

--------------------------------------------------

### Slide 9

**Titel:** Vad är versionskontroll?

**Innehåll:**

Ett system som håller koll på förändringar (i filer)
Möjliggör utveckling tillsammans med andra
Låter dig veta vem som ändrade vad. Och när.
Låter dig backa ändringar och återgå till ett tidigare läge

**Talarmanus:**

”Versionskontroll är ett system som sparar förändringar över tid.
Det låter oss se vem som ändrade vad och när, backa om något går fel och – viktigast i team – jobba parallellt utan att stå på varandra.

Ett konkret exempel: du råkar radera en funktion som behövdes.
Med versionskontroll bläddrar vi till en tidigare commit och plockar tillbaka den på minuten.
I övningarna kommer ni använda den här historiken direkt – både för att förstå vad som hände och för att lösa problem snabbt.”

--------------------------------------------------

### Slide 10

**Titel:** Vad är distribuerad versionskontroll?

**Innehåll:**

Versionskontroll där flera datorer samverkar
Användare har all kod och historik på sina egna datorer
Ändringar kan göras utan internetåtkomst
Skicka och ta emot filer till/från annan dator kräver förstås internetåtkomst

**Talarmanus:**

”Git är distribuerat.
Det betyder att hela historiken finns på varje utvecklares dator – inte bara på servern.

Fördelarna är tydliga:
• Du kan committa offline på tåget.
• Inget enda ‘centralt sanningsvittne’ – alla har en fullständig kopia.

Vi synkar med varandra via nätet (push/pull), men själva arbetet – brancher, commits, historik – funkar utan internet.
Det är det som gör Git snabbt och robust i vardagen.”

--------------------------------------------------

### Slide 11

**Titel:** Vad är Git?

**Innehåll:**

Git är inte det enda systemet för hantering av källkod som finns

Men det är det bästa (tycker vi)

**Talarmanus:**

”Git är ett av flera versionskontrollsystem, men i praktiken standarden i vår bransch.
Det som gör Git så starkt är branchhanteringen – det är billigt att skapa brancher, mergea och testa idéer.

I den här kursen nöter vi det lilla vardagsflödet: status → add → commit → push → PR.
Bemästrar du det, plus grundläggande merge, så kan du jobba i nästan vilket team som helst.”

--------------------------------------------------

### Slide 12

**Titel:** Gits arbetsflöde: de tre tillstånden

**Innehåll:**

I ett Git repository kan din fil finnas i tre primära tillstånd:
Modified (ändrad)
Staged (klar för spara)
Committed (sparad i repot)

Vad betyder detta?

**Talarmanus:**

”I Git rör sig filer mellan tre tillstånd:

Modified – filen är ändrad i din arbetskatalog.

Staged – du har sagt ‘de här raderna vill jag spara’ med git add.

Committed – ändringen är sparad i Git-historiken med git commit.

Det här är kärnan: git add väljer vad som ska med, git commit sparar det valet som en checkpoint.
En snabb demo strax: vi ändrar en fil, kör git status, lägger till med git add, och ser hur status växlar från Modified → Staged → Committed.”

--------------------------------------------------

### Slide 13

**Titel:** Gits arbetsflöde: de tre tillstånden

**Innehåll:**

Lokala operationer
Working directory
Staging area
Git directory (repository)
Du ändrar filer i din arbetskatalog

**Talarmanus:**
Här börjar vi titta på hur Git faktiskt fungerar bakom kulisserna.
Allt du gör i Git sker lokalt på din dator, och dina filer kan befinna sig i tre olika tillstånd.

När du arbetar med filer i din mapp kallas det working directory – där sker själva redigeringen.
Git håller inte koll på något än, du kan se detta som din verkstad där du provar och ändrar.

--------------------------------------------------

### Slide 14

**Titel:** Gits arbetsflöde: de tre tillstånden

**Innehåll:**

Lokala operationer
Working directory
Staging area
Git directory (repository)
Gör dina filer klara för sparande (stage), lägg ögonblicksbilder av dem till din staging area
Stage files

**Talarmanus:**
Nästa steg i flödet är staging area.
Här talar du om för Git: “De här filerna vill jag spara.”

Du väljer alltså vilka filer som ska inkluderas i nästa version – det kallas att stagea filer.
På så sätt kan du ändra flera filer, men bara välja ut vissa av dem att spara i en commit.
Det är lite som att lägga varor i kundkorgen innan du går till kassan.

--------------------------------------------------

### Slide 15

**Titel:** Gits arbetsflöde: de tre tillstånden

**Innehåll:**

Lokala operationer
Working directory
Staging area
Git directory (repository)
Gör en commit som sparar dina ögonblicksbilder permanent till ditt Git-repo
Stage files
Commit

**Talarmanus:**
När du är nöjd med det du har i staging area gör du en commit.
Det betyder att du skapar en ögonblicksbild av din kod — en snapshot som sparas permanent i Git-repot.

Du kan alltid gå tillbaka till just den versionen senare.
Det är därför Git är så kraftfullt – du har en historik över alla ändringar du gjort.

--------------------------------------------------

### Slide 16

**Titel:** Gits arbetsflöde: de tre tillstånden

**Innehåll:**

Lokala operationer
Working directory
Staging area
Git directory (repository)
Sedan kan du checka ut en tidigare version, göra ändringar, stage och commit
Stage files
Commit
Checkout

**Talarmanus:**
Till sist – du kan när som helst checka ut en tidigare version, göra nya ändringar, och sedan fortsätta med samma flöde igen:
ändra, stagea, committa.

Det här är grunden för versionshantering – att kunna röra sig fram och tillbaka mellan versioner utan att något försvinner.
Git är byggt för att du ska kunna experimentera tryggt.

--------------------------------------------------

### Slide 17

**Titel:** Hur funkar Git?

**Innehåll:**

Kan verka komplicerat till en början, men det finns några nyckelbegrepp
Viktig terminologi för git på de följande bilderna anges med blå text

**Talarmanus:**
Det här ser kanske avancerat ut, men det bygger på några få centrala begrepp.
För att verkligen förstå Git behöver man känna till dessa nyckelbegrepp som vi nu ska gå igenom.

På de kommande bilderna är de markerade i blått – försök lägga märke till dem, för de dyker upp ofta i arbetslivet.

--------------------------------------------------

### Slide 18

**Titel:** Nyckelbegrepp: Snapshot

**Innehåll:**

Gits sätt att spåra din kodhistorik
Tar i princip en bild av hur alla dina filer ser ut vid ett givet ögonblick
Du bestämmer när du vill ta ett snapshot, och av vilka filer
Möjligt att gå tillbaka till ett tidigare snapshot
Även dina senare snapshots kommer att finnas kvar

**Talarmanus:**
Ett snapshot är som en bild av hur din kod såg ut vid ett visst ögonblick.
Du bestämmer själv när du vill ta bilden – oftast när du gör en commit.

Git sparar alla dessa snapshots så att du kan gå tillbaka om något går fel.
Det fina är att även om du går tillbaka, så sparas dina senare snapshots – inget försvinner.

--------------------------------------------------

### Slide 19

**Titel:** Nyckelbegrepp: Commit

**Innehåll:**

Att skapa ett snapshot
Kan användas som substantiv eller verb (på svengelska)
“Jag committade koden”
“Jag gjorde just en ny commit”
Ett projekt består i princip av ett antal commits

**Talarmanus:**
En commit är själva handlingen att skapa ett snapshot.
Man säger ofta “jag committade koden” eller “jag gjorde en commit”.

Varje commit är som en milstolpe i projektets historia.
Ett Git-projekt består alltså av många commits som tillsammans utgör utvecklingsresan för din kod.

--------------------------------------------------

### Slide 20

**Titel:** Nyckelbegrepp: Commit (detaljer)

**Innehåll:**

En commit innehåller tre informationsdelar:
Information om hur filerna har förändrats sedan förra gången
En referens till föregående commit (parent commit)
Ett hash code-namn – t.ex. fb2d2ec5069fc6776c80b3ad6b7cbde3cade4e

**Talarmanus:**
Varje commit innehåller tre saker:

1. Vad som har ändrats.
2. En referens till den förra committen – som en kedja bakåt i tiden.
3. Ett unikt ID, en så kallad hash-kod.

Det är så Git bygger upp hela sin historik – en obruten kedja av commits, där varje steg vet vilket som var det förra.

--------------------------------------------------

### Slide 21

**Titel:** Nyckelbegrepp: Repository

**Innehåll:**

På svenska blir det arkiv
Förkortas ofta till “repo”
En samling som innehåller alla filer i projektet och historiken för dem alla
Består av alla dina commits
Det är där som allt ditt arbete sparas

**Talarmanus:**
Ett repository – eller “repo” – är som ett arkiv.
Det innehåller alla filer i projektet, plus hela deras historik.

Du kan tänka på det som projektets hjärna – allt sparas här: alla commits, alla versioner.
Det är här Git verkligen briljerar jämfört med att bara spara filer manuellt.

--------------------------------------------------

### Slide 22

**Titel:** Nyckelbegrepp: Repository (lokalt och fjärr)

**Innehåll:**

Kan bo på en lokal dator eller en server någonstans (t.ex. GitHub)
Att kopiera ett repo från en fjärrdator/server kallas att klona, cloning
När flera människor klonar från samma server kan de arbeta tillsammans

**Talarmanus:**
Ett repo kan ligga lokalt på din dator, men också på en server – till exempel GitHub.
När du klonar ett repo från en fjärrserver kopierar du hela historiken.

Det gör att flera personer kan arbeta parallellt, var och en med sin kopia av projektet, och sedan dela sina ändringar tillbaka.

--------------------------------------------------

### Slide 23

**Titel:** Nyckelbegrepp: Repository (pull & push)

**Innehåll:**

Att ladda ner commits som inte finns på din dator från ett fjärr-repo kallas att dra (pull) ändringar
Att lägga sina egna ändringar till ett fjärr-repo kallas att trycka (push) ändringar

**Talarmanus:**
När du hämtar ny kod från en server gör du en pull.
När du laddar upp din egen kod till servern gör du en push.

Det här är själva grunden i samarbete med Git – allas ändringar måste både dras ner och tryckas upp för att teamet ska vara synkat.

--------------------------------------------------

### Slide 24

**Titel:** Övning: terminalen

**Innehåll:**

Öppna terminalen
Ta reda på vilken mapp du är i
Byt mapp
Lista innehåll i mappen
Rensa fönstret
Skapa en ny fil

**Talarmanus:**
Nu är det dags att röra sig från teori till praktik.
Öppna terminalen och börja navigera i filsystemet.

Testa kommandon som ls, cd, pwd och clear – de är grunden för att jobba med Git på riktigt.
Syftet här är att bli bekväm i terminalen, eftersom Git huvudsakligen körs där.

--------------------------------------------------

### Slide 25

**Titel:** Level-up: terminalen

**Innehåll:**

Öppna terminalen och skapa en ny mapp med namnet "TerminalÖvning".
Navigera in i den nya mappen.
Skapa tre nya filer med namnen "fil1.txt", "fil2.txt" och "fil3.txt".
Skapa en ny mapp med namnet "Undermapp".
Flytta "fil1.txt" och "fil2.txt" till "Undermapp".
Kopiera "fil3.txt" till "Undermapp".
Använd lämpliga kommandon för att visa innehållet i "Undermapp".
Skapa en ny textfil med namnet "sok.txt" och skriv några ord i den.
Använd kommandon för att söka efter och visa innehållet i "sok.txt".
Radera sedan "sok.txt".
Visa den fullständiga sökvägen till den aktuella arbetskatalogen.

**Talarmanus:**
Nu ska ni ta det ett steg längre: skapa mappar och filer, flytta, kopiera, söka och radera.
Den här övningen tränar inte bara kommandon, utan även strukturellt tänkande – att kunna hålla ordning på sitt projekt.

Git är kraftfullt, men bara om du vet var du befinner dig i din mappstruktur.

--------------------------------------------------

### Slide 26

**Titel:** Övning staging

**Innehåll:**

Börja i en tom mapp. Skapa ett git-repository genom att skriva i terminalen:
git init 
git status

Lägg till en fil "index.html". Använd git för att lägga till den i staging area:
git add index.html (eller git add --all) 
git status

När du lagt till alla filer som ska sparas, skriv:
git commit -m "Added index.html" 
git status

Ett commit-meddelande används för att beskriva de ändringar man har gjort i filen sedan förra versionen.

**Talarmanus:**
Här börjar Git på riktigt.
Ni skapar ett nytt repo med git init, lägger till filer med git add, och sparar versioner med git commit.

Känn efter hur flödet känns: ändra → add → commit.
Varje steg motsvarar ett tillstånd i Git – precis som vi nyss gick igenom.

Detta moment uppfyller flera kursmål: att förstå grunderna i Git och att kunna hantera egna repos.

--------------------------------------------------
--------------------------------------------------

(Från slide 6 påminnelse:
git config --global user.name "Förnamn Efternamn"
git config --global user.email "din@mail.se"
git config --global init.defaultBranch main
)

💻 Demo 1 – “Från tom mapp till första commit”

📂 Mappstruktur:

- Kör live i Git Bash (visa skärmen stort, zooma texten):

mkdir git-intro && cd git-intro
git init
echo "# Min första README" > README.md
git status
git add README.md
git commit -m "Add README"
git log --oneline

--------------------------------------------------

- Förstora kopplingen: modified → staged → committed (peka tillbaka till slides 12–16).

--------------------------------------------------

- Lägg till .gitignore:

echo "node_modules/" > .gitignore
git add .gitignore
git commit -m "Add .gitignore"

--------------------------------------------------

Förklara att .gitignore hålls i repo (delas med teamet).

--------------------------------------------------
--------------------------------------------------

💻 Demo 2 – “Koppla till GitHub & push”

- Skapa nytt tomt repo på GitHub (namn: git-intro).

--------------------------------------------------

- Koppla & push:

git remote add origin <REPO_URL>
git branch -M main

# Om GitHub-repot INTE är helt tomt (t.ex. om du råkade skapa det med README):
git pull --rebase origin main

git push -u origin main

💡 GitHub accepterar inte längre vanliga lösenord vid `git push`. 
Använd istället en **Personal Access Token (PAT)** eller **SSH-nyckel** för autentisering.

Kort sagt: PAT = engångs-lösenord du skapar på GitHub under “Developer Settings → Personal Access Tokens”.

**Skapa PAT (Personal Access Token) – steg för steg**
1. Gå till GitHub → din avatar (uppe till höger) → **Settings**.
2. I vänstermenyn: **Developer settings** → **Personal access tokens**.
   - Välj **Fine-grained token** (rekommenderas) eller **Tokens (classic)** för enkel demo.
3. Klicka **Generate new token**.
4. Fyll i:
   - **Note**: t.ex. “Class demo”
   - **Expiration**: t.ex. 30 eller 90 dagar (kort är säkrare)
   - **Repository access / Scopes**:
     - Fine-grained: välj det aktuella repot och ge *Read/Write* till “Contents”.
     - Classic: kryssa i **repo** (räcker för demo).
5. Klicka **Generate token** → **Kopiera** token (den visas bara en gång).
6. Tillbaka i terminalen: när `git push` frågar efter **username** → skriv ditt GitHub-användarnamn.
   När den frågar efter **password** → **klistra in token** (PAT) som “lösenord”.

Tips:
- Spara token i Credential Manager (sker ofta automatiskt).
- Rotera/token-förnya när den löper ut eller om du tappat bort den.

Alternativ: SSH-nyckel för smidigare framtida push

--------------------------------------------------

- Visa på GitHub att README och historik finns där. Snabb reality-check: “Det här är origin.”

--------------------------------------------------
--------------------------------------------------

- Installation & fallback 

För dem som saknar Git: 

- Skicka dem hit (visa QR eller länk på en slide/tavlan):

  - Alla OS: https://git-scm.com/downloads

- Direktlänkar om du vill peka per OS:

  - Windows: https://git-scm.com/download/win

  - macOS (Intel/Apple Silicon): https://git-scm.com/download/mac

  - Linux: välj distro via https://git-scm.com/download/linux

Säg: Om någons autentisering strular idag → vi jobbar lokalt först (init, add, commit). Push fixas efter lektionen om det behövs.

--------------------------------------------------

🧯 Snabb felsökning/"Stödskylt" (skriv upp på tavlan)

- “git: command not found” → Installera Git, stäng/öppna terminal.

- Fel namn/e-post i commit → git config --global user.name/user.email → ny commit.

- “rejected” vid push → git pull --rebase origin main (om repo inte är helt tomt).

- Autentisering mot GitHub → Använd PAT eller SSH, inte lösenord.

- Inget händer? → Kör git status. Läs vad den säger 

  - Gör det den säger (t.ex. git add, git commit), fråga sen

- Varför? git status är Git:s “GPS”. Den berättar:

  - Var filerna befinner sig (Working dir / Staging / Repo)

  - Vad nästa rimliga kommando är (den tipsar ofta: “use git add …” eller “use git commit …”).

--------------------------------------------------
--------------------------------------------------

🧠 Självständiga övningar finns i exercises mappen
+
Studenterna gör Slide 24–26 övningarna (terminal & staging) i egen takt.
Mål: alla ska nå “första pushen till GitHub” (om möjligt) eller åtminstone ha 2–3 commits lokalt + .gitignore.

--------------------------------------------------
--------------------------------------------------